import requests
import json

# ========================
# Configura√ß√£o do Supabase
# ========================
SUPABASE_URL = "https://muqksofhbonebgbpuucy.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im11cWtzb2ZoYm9uZWJnYnB1dWN5Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjYwOTA5OCwiZXhwIjoyMDcyMTg1MDk4fQ.k5W4Jr_q77O09ugiMynOZ0Brlk1l8u35lRtDxu0vpxw"

headers = {
    "apikey": SUPABASE_KEY,
    "Authorization": f"Bearer {SUPABASE_KEY}",
    "Content-Type": "application/json"
}

# ========================
# Fun√ß√µes de teste
# ========================

def buscar_usuarios():
    """Busca todos os usu√°rios para escolher um ID v√°lido"""
    url = f"{SUPABASE_URL}/rest/v1/usuarios?select=id,nome%20de%20usuario"
    try:
        response = requests.get(url, headers=headers)
        print(f"\nüîç Buscando usu√°rios...")
        print(f"Status Code: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Usu√°rios encontrados: {len(data)}")
            return data
        else:
            print(f"‚ùå Erro ao buscar usu√°rios: {response.status_code}")
            print(f"Resposta: {response.text}")
            return []
    except Exception as e:
        print(f"‚ö†Ô∏è Erro de conex√£o ao buscar usu√°rios: {str(e)}")
        return []


def criar_permissao_teste(usuario_id):
    """Cria uma permiss√£o de teste para um usu√°rio"""
    dados = {
        "usuario_id": usuario_id,
        "pode_ver_empresas": True,
        "pode_editar_empresas": False,
        "pode_criar_servicos": True,
        "pode_criar_orcamentos": True,
        "pode_registrar_estoque": False,
        "pode_ver_fornecedores": False,
        "pode_gerenciar_usuarios": False,
        "pode_exportar_excel": False
    }
    url = f"{SUPABASE_URL}/rest/v1/permissoes_usuario"
    
    print(f"\n‚ûï Tentando criar permiss√£o para usuario_id = {usuario_id}")
    print(f"üì¶ Dados enviados: {json.dumps(dados, indent=2)}")
    
    try:
        response = requests.post(url, json=dados, headers=headers)
        print(f"Status Code: {response.status_code}")
        print(f"Resposta Bruta: {response.text}")
        
        if response.status_code == 201:
            print("‚úÖ Permiss√£o criada com sucesso!")
            try:
                return response.json()
            except json.JSONDecodeError:
                print("‚ö†Ô∏è A resposta n√£o √© um JSON v√°lido, mas a inser√ß√£o foi bem-sucedida.")
                return {"success": True, "message": "Inserido, mas sem corpo JSON"}
        else:
            print("‚ùå Erro ao criar permiss√£o:")
            print(f"Status: {response.status_code}")
            print(f"Resposta: {response.text}")
            return None
    except Exception as e:
        print(f"‚ö†Ô∏è Erro de conex√£o ao criar permiss√£o: {str(e)}")
        return None


def buscar_permissao_por_usuario(usuario_id):
    """Busca as permiss√µes de um usu√°rio"""
    url = f"{SUPABASE_URL}/rest/v1/permissoes_usuario?usuario_id=eq.{usuario_id}"
    print(f"\nüîé Buscando permiss√µes para usuario_id = {usuario_id}...")
    
    try:
        response = requests.get(url, headers=headers)
        print(f"Status Code: {response.status_code}")
        if response.status_code == 200:
            permissoes = response.json()
            if permissoes:
                print("‚úÖ Permiss√µes encontradas:")
                for p in permissoes:
                    print(json.dumps(p, indent=2, ensure_ascii=False))
            else:
                print("‚ö†Ô∏è Nenhuma permiss√£o encontrada para este usu√°rio.")
        else:
            print("‚ùå Erro ao buscar permiss√µes:", response.status_code, response.text)
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao buscar permiss√µes: {str(e)}")


def deletar_permissao_por_usuario(usuario_id):
    """Deleta as permiss√µes de um usu√°rio (√∫til para testes)"""
    url = f"{SUPABASE_URL}/rest/v1/permissoes_usuario?usuario_id=eq.{usuario_id}"
    print(f"\nüóëÔ∏è Deletando permiss√µes antigas do usuario_id = {usuario_id}...")
    
    try:
        response = requests.delete(url, headers=headers)
        print(f"Status Code: {response.status_code}")
        if response.status_code == 204:
            print("‚úÖ Permiss√µes deletadas com sucesso!")
        else:
            print("‚ùå Erro ao deletar permiss√µes:", response.status_code, response.text)
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao deletar permiss√µes: {str(e)}")


# ========================
# Execu√ß√£o do teste
# ========================

if __name__ == "__main__":
    print("üöÄ Iniciando teste da tabela 'permissoes_usuario'...")

    # 1. Buscar usu√°rios
    usuarios = buscar_usuarios()
    
    if not usuarios:
        print("‚ùå Nenhum usu√°rio encontrado. Cadastre um usu√°rio primeiro!")
        exit(1)

    # 2. Mostrar lista de usu√°rios
    print("\nüìã Usu√°rios dispon√≠veis:")
    for u in usuarios:
        print(f"ID: {u['id']} - Usu√°rio: {u['nome de usuario']}")

    # 3. Pedir ID do usu√°rio
    try:
        usuario_id = int(input("\nüëâ Digite o ID do usu√°rio para testar permiss√µes: "))
    except ValueError:
        print("‚ùå ID inv√°lido. Digite um n√∫mero inteiro.")
        exit(1)

    # 4. Verificar se o usu√°rio existe
    usuario_existe = any(u['id'] == usuario_id for u in usuarios)
    if not usuario_existe:
        print(f"‚ùå O ID {usuario_id} n√£o existe na tabela 'usuarios'.")
        exit(1)

    # 5. Deletar permiss√µes antigas (opcional)
    deletar_permissao_por_usuario(usuario_id)

    # 6. Criar nova permiss√£o
    permissao = criar_permissao_teste(usuario_id)

    # 7. Verificar se foi salva
    if permissao:
        print(f"\nüîç Verificando permiss√µes salvas...")
        buscar_permissao_por_usuario(usuario_id)
    else:
        print("\n‚ùå Falha ao criar permiss√£o. Verifique:")
        print("- Se a tabela 'permissoes_usuario' existe")
        print("- Se a chave API est√° correta (use Service Role Key)")
        print("- Se o RLS est√° desativado ou com pol√≠tica de acesso")
        print("- Se o campo 'usuario_id' √© NOT NULL e tem FK para 'usuarios.id'")

    print("\nüèÅ Teste conclu√≠do!")